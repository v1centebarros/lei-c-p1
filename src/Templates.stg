typeMap ::= [ 
    "NUM": "float", 
    "BOOL": "bool", 
    "TEXT": "string", 
    "ENUM": "int", 
    "ROBOT": "", 
    default: "void"
]

externalFunctionsMap ::= [ 
    "print": "cout << ",
    "initRobot": "init",
    "rotate": "motors",
    "move": "motors",
    "posX" : "posX",
    "posY": "posY",
    "pickUp": "pickUp",
    "returning": "returning",
    "finish": "finish",
    "stop": "motors",
    "obstacleDistance": "obstacleDistance",
    "beaconAngle": "beaconAngle",
    "northAngle": "northAngle",
    "groundType": "groundType",
    "onTarget": "onTarget",
    "beaconCount": "beaconCount",
    "startAngle": "startAngle",
    "startDistance": "startDistance",
    "collides": "collides",
    "setVisitingLed": "setVisitingLed",
    "setReturningLed": "setReturningLed",
    "getReturningLed": "getReturningLed",
    "getVisitingLed": "getVisitingLed",
    default: "unknow"
]


program(global, processBlock, main) ::= <<
#include "CiberAV.h"
#include "RobSock.h"
#include \<unistd.h>
#include \<sys/wait.h>
#include \<sys/types.h>
#include \<stdlib.h>
#include \<stdio.h>
#include \<iostream>

using namespace std;

<if(global)><global><endif>

<if(processBlock)><processBlock><endif>


int main() {
    <main>

    return 0;
}
>>

processBlock(process_name, stats) ::= <<void <process_name>(){
    <stats>
}


>>

forkBlock(func, counter) ::= <<pid_t pid<counter> = fork();
if (pid<counter> == 0)
{
    <func>();
}


>>


assign(type, name, value) ::= <<<if(type)><typeMap.(type)> <endif>var_<name> = <value>
>>


blockIf(expr, stat, blockElse) ::= <<if (<expr>) {
    <stat>
}
<if(blockElse)><blockElse><endif>
>>

blockElse(stat) ::= <<else {
    <stat>
}
>>

blockWhile(expr, stat) ::= <<while (<expr>) {
    <stat>
}
>>

blockUntil(expr, call) ::= <<while (!(<expr>)) {
    <call>
}
>>

externalFunctions(ID1, ID2, expr) ::= <<<if(ID1)><externalFunctionsMap.(ID1)><endif><if(ID2)><externalFunctionsMap.(ID2)><endif>(<expr; separator=", ">)
>>