typeMap ::= [ 
    "NUM": "float", 
    "BOOL": "bool", 
    "TEXT": "string", 
    "ENUM": "int",
    "LIST_NUM": "std::vector<float>",
    "LIST_TEXT": "std::vector<string>",
    "LIST_BOOL": "std::vector<bool>",
    "LIST_POINT": "std::vector<Point>",
    "LIST_TWIST": "std::vector<Point>",
    "ROBOT": "", 
    default: "void"
]

externalFunctionsMap ::= [
    "print": "cout << ",
    "size": "size",
    "add": "push_back",
    "getIndex": "at",
    "initRobot": "init",
    "rotate": "motors",
    "move": "motors",
    "posX" : "posX",
    "posY": "posY",
    "pickUp": "pickUp",
    "returning": "returning",
    "finish": "finish",
    "stop": "motors",
    "obstacleDistance": "obstacleDistance",
    "beaconAngle": "beaconAngle",
    "northAngle": "northAngle",
    "groundType": "groundType",
    "onTarget": "onTarget",
    "beaconCount": "beaconCount",
    "startAngle": "startAngle",
    "startDistance": "startDistance",
    "collides": "collides",
    "setVisitingLed": "setVisitingLed",
    "setReturningLed": "setReturningLed",
    "getReturningLed": "getReturningLed",
    "getVisitingLed": "getVisitingLed",
    default: "unknown"
]


program(global, processBlock, funcBlock, main) ::= <<
#include "CiberAV.h"
#include "RobSock.h"
#include \<unistd.h>
#include \<sys/wait.h>
#include \<sys/types.h>
#include \<stdlib.h>
#include \<stdio.h>
#include \<iostream>
#include \<vector>
#include \<math.h>
using namespace std;


class Point {
  public:
    int x;
    int y;

    // Constructor
    Point(int x, int y) {
      this->x = x;
      this->y = y;
    }

    // Distance point/pose
    float distance(float x, float y) {
      return sqrt(pow(x - this->x, 2) + pow(y - this->y, 2));
    }

    // overload the * operator to multiply a point by a scalar
    Point operator*(float scalar) {
      return Point(this->x * scalar, this->y * scalar);
    }

    // Overload the + operator
    Point operator+(const Point& p) {
      return Point(this->x + p.x, this->y + p.y);
    }

    // Overload the - operator
    Point operator-(const Point& p) {
      return Point(this->x - p.x, this->y - p.y);
    }

    // overload the \<\< operator
    friend ostream& operator<<(ostream& os, const Point& p) {
      os \<\< "(" \<\< p.x << ", " \<\< p.y \<\< ")";
      return os;
    }

};

class Twist{
  public:
    int linear;
    int angular;

    // Constructor
    Twist(int linear, int angular) {
      this->linear = linear;
      this->angular = angular;
    }

    // overload the * operator to multiply a point by a scalar
    Twist operator*(float scalar) {
      return Twist(this->linear * scalar, this->angular * scalar);
    }

    // overload the + operator
    Twist operator+(const Twist& t) {
      return Twist(this->x + t.x, this->y + t.y);
    }

    // overload the - operator
    Twist operator-(const Twist& t) {
      return Twist(this->x - t.x, this->y - t.y);
    }

    // overload the \<\< operator
    friend ostream& operator<<(ostream& os, const Twist& t) {
      os \<\< "(" << t.x \<\< ", " \<\< t.y \<\< ")";
      return os;
    }
    
};

class Pose{
  public:
    int x;
    int y;
    int angle;

    Pose (int x, int y, int angle) {
      this->x = x;
      this->y = y;
      angle = angle % 360;
      if(angle >180){
        this->angle= 360 - angle;
      }
      else if (angle < -180){
        this->angle = 360 + angle;
      }
      else{
        this->angle = angle;
      }
    }

    // Distance point/pose
    float distance(float x, float y) {
      return sqrt(pow(x - this->x, 2) + pow(y - this->y, 2));
    }
    // angle between pose and point in degrees
    float angleTo(float x, float y) {
      return atan2(y - this->y, x - this->x) * 180 / M_PI - this->theta;
    }

    // overload the + operator
    Pose operator+(const Twist& t) {
      return Pose(this->x + t.x, this->y + t.y, this->theta + t.y);
    }

    // overload the - operator
    Pose operator-(const Twist& t) {
      return Pose(this->x - t.x, this->y - t.y, this->theta - t.y);
    }

    // overload the \<\< operator
    friend ostream& operator<<(ostream& os, const Pose& p) {
      os \<\< "(" \<\< p.x \<\< ", " \<\< p.y << ", " \<\< p.theta \<\< ")";
      return os;
    }
};


<if(global)><global><endif>

<if(funcBlock)><funcBlock><endif>

<if(processBlock)><processBlock><endif>


int main() {
    <if(main)><main><endif>

    return 0;
}
>>

processBlock(process_name, stats) ::= <<void <process_name>(){
    <stats>
}


>>

forkBlock(func, counter) ::= <<pid_t pid<counter> = fork();
if (pid<counter> == 0)
{
    <func>();
}

>>

funcBlock(funcType, funcName, funcArgs, funcStat) ::= <<<funcType> <funcName>(<funcArgs; separator=", ">){
    <funcStat>
}


>>


assign(type, name, value) ::= <<<if(type)><typeMap.(type)> <endif>var_<name> = <value>
>>


blockIf(expr, stat, blockElse) ::= <<if (<expr>) {
    <stat>
}
<if(blockElse)><blockElse><endif>
>>

blockElse(stat) ::= <<else {
    <stat>
}
>>

blockWhile(expr, stat) ::= <<while (<expr>) {
    <stat>
}
>>

blockUntil(expr, call) ::= <<while (!(<expr>)) {
    <call>
}
>>

blockForeach(var, lst, stat) ::= <<for (auto <var> : <lst>) {
        <stat>
}

>>

externalFunctions(ID1, ID2, expr, user_func) ::= <<<if(ID1)><ID1>.<endif><if(ID2)><externalFunctionsMap.(ID2)><endif><if(user_func)><user_func><endif>(<expr; separator=", ">)
>>

