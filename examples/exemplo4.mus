#exemplo da tradução do a4.cpp para .mus

NUM position = 0;
ROBOT Grimmy = ("Grimmy", position);
USE Grimmy;
NUM i = beaconCount;
while i > 0 do
    print "Going to beacon ", i, "\n";
    
    # gotoBeacon i ;
    rotate 80 until -10 < beaconAngle bn < 10;

    while groundType != bn do
        NUM linearPower = 80.0;
        NUM angularPower = 1 * beaconAngle bn ;

        NUM fdist = obstacleDistance FRONTSENSOR;
        NUM ldist = obstacleDistance LEFTSENSOR;
        NUM rdist = obstacleDistance RIGHTSENSOR;

        until collides do
            linearPower = 0.0;
            angularPower = -50.0;
        end
        else until fdist < 1.5 do
            until ldist < 1.5 do
                linearPower = 0.0;
                angularPower = -50.0;
            end
            else do
                linearPower = 0.0;
                angularPower = 50.0;
            end
        end
        else until ldist < 1.5 do
            angularPower = -30.0;
        end
        else until rdist < 1.5 do
            angularPower = 30.0;
        end

        move linearPower - angularPower, linearPower + angularPower;
    end

    stop;
    
    pickUp;
    i = i - 1;
end

returning;

rotate 80 until -10 < startAngle <10;

while startDistance > 2 do
    NUM linearPower = 80.0;
    NUM angularPower = 1 * startAngle;

    NUM fdist = obstacleDistance FRONTSENSOR;
    NUM ldist = obstacleDistance LEFTSENSOR;
    NUM rdist = obstacleDistance RIGHTSENSOR;

    until collides do
        linearPower = 0.0;
        angularPower = -50.0;
    end
    else until fdist < 1.5 do
        until ldist < 1.5 do
            linearPower = 0.0;
            angularPower = -50.0;
        end
        else do
            linearPower = 0.0;
            angularPower = 50.0;
        end
    end
    else until ldist < 1.5 do
        angularPower = -30.0;
    end
    else until rdist < 1.5 do
        angularPower = 30.0;
    end

    move linearPower - angularPower, linearPower + angularPower;
end

while startDistance > 0.3 do
    NUM linearPower = 40.0;
    NUM angularPower = 1 * startAngle;
    move linearPower - angularPower, linearPower + angularPower;
end

stop;

finish;
